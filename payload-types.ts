/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  collections: {
    users: User;
    pages: Page;
    blogs: Blog;
    tags: Tag;
    media: Media;
    jobPosts: JobPost;
    scheduleCall: ScheduleCall;
    jobTypes: JobType;
    jobRoles: JobRole;
    salaryRange: SalaryRange;
    search: Search;
    forms: Form;
    'form-submissions': FormSubmission;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    pages: PagesSelect<false> | PagesSelect<true>;
    blogs: BlogsSelect<false> | BlogsSelect<true>;
    tags: TagsSelect<false> | TagsSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    jobPosts: JobPostsSelect<false> | JobPostsSelect<true>;
    scheduleCall: ScheduleCallSelect<false> | ScheduleCallSelect<true>;
    jobTypes: JobTypesSelect<false> | JobTypesSelect<true>;
    jobRoles: JobRolesSelect<false> | JobRolesSelect<true>;
    salaryRange: SalaryRangeSelect<false> | SalaryRangeSelect<true>;
    search: SearchSelect<false> | SearchSelect<true>;
    forms: FormsSelect<false> | FormsSelect<true>;
    'form-submissions': FormSubmissionsSelect<false> | FormSubmissionsSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: number;
  };
  globals: {
    'site-settings': SiteSetting;
  };
  globalsSelect: {
    'site-settings': SiteSettingsSelect<false> | SiteSettingsSelect<true>;
  };
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: number;
  displayName?: string | null;
  /**
   * Contains only lowercase letters, numbers, and dashes.
   */
  username: string;
  imageUrl?: (number | null) | Media;
  role: ('admin' | 'author' | 'user')[];
  emailVerified?: string | null;
  socialLinks?:
    | {
        platform:
          | 'website'
          | 'facebook'
          | 'instagram'
          | 'twitter'
          | 'linkedin'
          | 'youtube'
          | 'tiktok'
          | 'pinterest'
          | 'snapchat'
          | 'reddit'
          | 'tumblr'
          | 'whatsapp'
          | 'telegram'
          | 'github'
          | 'medium'
          | 'quora'
          | 'discord';
        value: string;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  _verified?: boolean | null;
  _verificationToken?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: number;
  alt?: string | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
  sizes?: {
    thumbnail?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    blogImageSize2?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    blogImageSize3?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
  id: number;
  title: string;
  layout?:
    | (
        | DetailsType
        | ListType
        | FormType
        | HeroType
        | BlogPostsType
        | CompaniesType
        | ContentType
        | ImageBlockType
        | TeamType
        | ValuesType
        | TermsOrPrivacyType
        | FeaturedJobsType
        | ContactType
        | DisqusCommentsType
      )[]
    | null;
  meta?: {
    title?: string | null;
    description?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (number | null) | Media;
  };
  /**
   * Check to covert page as Home Page
   */
  isHome?: boolean | null;
  /**
   * Check to covert page as Dynamic
   */
  isDynamic?: boolean | null;
  /**
   * Choose Generate to create a slug automatically or Custom to set your own slug
   */
  slugMode?: ('generate' | 'custom') | null;
  /**
   * Contains only lowercase letters, numbers, and dashes.
   */
  slug?: string | null;
  /**
   * Choose Generate to create a page-path automatically or Custom to set your own page-path
   */
  pathMode?: ('generate' | 'custom') | null;
  path?: string | null;
  parent?: (number | null) | Page;
  breadcrumbs?:
    | {
        doc?: (number | null) | Page;
        url?: string | null;
        label?: string | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "DetailsType".
 */
export interface DetailsType {
  collectionSlug?: ('blogs' | 'tags' | 'users' | 'jobPosts') | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'Details';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ListType".
 */
export interface ListType {
  /**
   * This will be used as title for the list
   */
  title?: string | null;
  collectionSlug?: ('blogs' | 'tags' | 'users' | 'jobPosts') | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'List';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FormType".
 */
export interface FormType {
  title: string;
  form: {
    relationTo: 'forms';
    value: number | Form;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'FormBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "forms".
 */
export interface Form {
  id: number;
  title: string;
  fields?:
    | (
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            defaultValue?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'checkbox';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'country';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'email';
          }
        | {
            message?:
              | {
                  [k: string]: unknown;
                }[]
              | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'message';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'number';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            options?:
              | {
                  label: string;
                  value: string;
                  id?: string | null;
                }[]
              | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'select';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'text';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'textarea';
          }
        | {
            name: string;
            label?: string | null;
            /**
             * Enter the maximum size of each file in MB
             */
            size: number;
            width?: number | null;
            /**
             * Check this box if you want to allow multiple attachments
             */
            multiple: boolean;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'upload';
          }
      )[]
    | null;
  submitButtonLabel?: string | null;
  /**
   * Choose whether to display an on-page message or redirect to a different page after they submit the form.
   */
  confirmationType?: ('message' | 'redirect') | null;
  confirmationMessage?:
    | {
        [k: string]: unknown;
      }[]
    | null;
  redirect?: {
    url: string;
  };
  /**
   * Send custom emails when the form submits. Use comma separated lists to send the same email to multiple recipients. To reference a value from this form, wrap that field's name with double curly brackets, i.e. {{firstName}}. You can use a wildcard {{*}} to output all data and {{*:table}} to format it as an HTML table in the email.
   */
  emails?:
    | {
        emailTo?: string | null;
        cc?: string | null;
        bcc?: string | null;
        replyTo?: string | null;
        emailFrom?: string | null;
        subject: string;
        /**
         * Enter the message that should be sent in this email.
         */
        message?:
          | {
              [k: string]: unknown;
            }[]
          | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "HeroType".
 */
export interface HeroType {
  heading: string;
  description?: string | null;
  heroSectionImages?:
    | {
        image: number | Media;
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'Hero';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "BlogPostsType".
 */
export interface BlogPostsType {
  heading: string;
  description?: string | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'BlogPosts';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CompaniesType".
 */
export interface CompaniesType {
  heading: string;
  companyLogos?:
    | {
        companyLogo: number | Media;
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'Companies';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ContentType".
 */
export interface ContentType {
  heading: string;
  description?: string | null;
  contentDetails?:
    | {
        title: string;
        subtitle: string;
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'Content';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ImageBlockType".
 */
export interface ImageBlockType {
  image: number | Media;
  id?: string | null;
  blockName?: string | null;
  blockType: 'ImageBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TeamType".
 */
export interface TeamType {
  heading: string;
  description?: string | null;
  team?:
    | {
        image: number | Media;
        name?: string | null;
        designation?: string | null;
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'Team';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ValuesType".
 */
export interface ValuesType {
  heading: string;
  description?: string | null;
  values?:
    | {
        title?: string | null;
        description?: string | null;
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'Values';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TermsOrPrivacyType".
 */
export interface TermsOrPrivacyType {
  /**
   * Main content of the page. Use the rich text editor for formatting.
   */
  content: {
    [k: string]: unknown;
  }[];
  id?: string | null;
  blockName?: string | null;
  blockType: 'TermsOrPrivacy';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FeaturedJobsType".
 */
export interface FeaturedJobsType {
  heading?: string | null;
  description?: string | null;
  buttonText?: string | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'FeaturedJobs';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ContactType".
 */
export interface ContactType {
  address?: string | null;
  contactNumber?: string | null;
  mail?: string | null;
  contactForm?: (number | null) | Form;
  id?: string | null;
  blockName?: string | null;
  blockType: 'Contact';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "DisqusCommentsType".
 */
export interface DisqusCommentsType {
  title?: string | null;
  /**
   * To find your Disqus shortname, log into Disqus, access the Admin panel, and check the URL or General Site Settings.
   */
  shortName: string;
  id?: string | null;
  blockName?: string | null;
  blockType: 'DisqusComments';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "blogs".
 */
export interface Blog {
  id: number;
  /**
   * Upload blog image
   */
  blogImage: number | Media;
  title: string;
  /**
   * Add the summary of the blog post
   */
  description: string;
  tags?:
    | {
        relationTo: 'tags';
        value: number | Tag;
      }[]
    | null;
  author?:
    | {
        relationTo: 'users';
        value: number | User;
      }[]
    | null;
  /**
   * Main content of the blog post. Use the rich text editor for formatting.
   */
  content: {
    [k: string]: unknown;
  }[];
  meta?: {
    title?: string | null;
    description?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (number | null) | Media;
  };
  /**
   * Contains only lowercase letters, numbers, and dashes.
   */
  slug?: string | null;
  /**
   * Save it as draft to schedule.
   */
  publishOn?: string | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tags".
 */
export interface Tag {
  id: number;
  /**
   * Upload tag image
   */
  tagImage: number | Media;
  title: string;
  description: string;
  color?: ('blue' | 'gray' | 'red' | 'green' | 'yellow' | 'indigo' | 'purple' | 'pink') | null;
  meta?: {
    title?: string | null;
    description?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (number | null) | Media;
  };
  /**
   * Contains only lowercase letters, numbers, and dashes.
   */
  slug?: string | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "jobPosts".
 */
export interface JobPost {
  id: number;
  company: {
    /**
     * The name of the company posting the job.
     */
    name: string;
    /**
     * The primary contact email for job applications.
     */
    email: string;
    /**
     * Upload the company logo to be displayed with the job post.
     */
    logo: number | Media;
    /**
     * The official website of the company.
     */
    website?: string | null;
    /**
     * The headquarters or primary office location of the company.
     */
    location?: string | null;
  };
  dates: {
    /**
     * The date when the job posting becomes active.
     */
    openingDate: string;
    /**
     * The date when the job posting expires.
     */
    closingDate?: string | null;
  };
  jobDetails: {
    /**
     * The title of the job position.
     */
    title: string;
    slug?: string | null;
    /**
     * Select the type of employment for the job (e.g., Full-time, Part-time, Contract, Freelance).
     */
    type: number | JobType;
    /**
     * Select the roles for the job (e.g., Software Engineer, Project Manager, Data Analyst).
     */
    roles: (number | JobRole)[];
    /**
     * Include key details about the job role, such as responsibilities, team structure, and expectations.
     */
    description: {
      [k: string]: unknown;
    }[];
    /**
     * The location where the job will be based.
     */
    location: string;
    salaryRange: {
      /**
       * The minimum annual salary for the position.
       */
      min: number;
      /**
       * The maximum annual salary for the position.
       */
      max: number;
    };
    /**
     * Check this box if the job can be performed remotely.
     */
    remote?: boolean | null;
  };
  requirements: {
    /**
     * Specify the required years of experience for the position.
     */
    experience: number;
    /**
     * Add the required qualifications for the job.
     */
    qualifications?:
      | {
          /**
           * List the required qualification to the job.
           */
          qualification: string;
          id?: string | null;
        }[]
      | null;
    /**
     * List the key skills required for the job.
     */
    skills: {
      /**
       * List the programming languages, frameworks, and tools required for the job.
       */
      skill: string;
      id?: string | null;
    }[];
  };
  application: {
    /**
     * Select whether the application form URL is internal (linking to a form within the site) or external.
     */
    applyType: 'internal' | 'external';
    /**
     * Provide the URL where candidates can apply for the job if external.
     */
    externalFormUrl?: string | null;
    /**
     * Select the form where candidates can apply for the job if internal.
     */
    internalForm?: (number | null) | Form;
  };
  /**
   * Mark this job post to appear highlighted or featured in the listings.
   */
  featured?: boolean | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "jobTypes".
 */
export interface JobType {
  id: number;
  /**
   * Enter the name of the job type (e.g., Full-Time, Part-Time, Contract).
   */
  title: string;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "jobRoles".
 */
export interface JobRole {
  id: number;
  /**
   * Enter the name of the job role (e.g., Software Engineer, Product Manager).
   */
  title: string;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "scheduleCall".
 */
export interface ScheduleCall {
  id: number;
  company: string;
  name: string;
  email: string;
  role: string;
  /**
   * The date and time for the scheduled call.
   */
  scheduledDate?: string | null;
  status?: ('pending' | 'scheduled' | 'completed' | 'cancelled' | 'rescheduled') | null;
  /**
   * Additional notes or comments by the admin.
   */
  notes?: string | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "salaryRange".
 */
export interface SalaryRange {
  id: number;
  salaryType: 'range' | 'lessThan' | 'greaterThan';
  salaryMin?: number | null;
  salaryMax?: number | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This is a collection of automatically created search results. These results are used by the global site search and will be updated automatically as documents in the CMS are created or updated.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "search".
 */
export interface Search {
  id: number;
  title?: string | null;
  priority?: number | null;
  doc:
    | {
        relationTo: 'blogs';
        value: number | Blog;
      }
    | {
        relationTo: 'tags';
        value: number | Tag;
      }
    | {
        relationTo: 'users';
        value: number | User;
      };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "form-submissions".
 */
export interface FormSubmission {
  id: number;
  form: number | Form;
  submissionData?:
    | {
        field: string;
        value: string;
        file?: (number | Media)[] | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: number;
  document?:
    | ({
        relationTo: 'users';
        value: number | User;
      } | null)
    | ({
        relationTo: 'pages';
        value: number | Page;
      } | null)
    | ({
        relationTo: 'blogs';
        value: number | Blog;
      } | null)
    | ({
        relationTo: 'tags';
        value: number | Tag;
      } | null)
    | ({
        relationTo: 'media';
        value: number | Media;
      } | null)
    | ({
        relationTo: 'jobPosts';
        value: number | JobPost;
      } | null)
    | ({
        relationTo: 'scheduleCall';
        value: number | ScheduleCall;
      } | null)
    | ({
        relationTo: 'jobTypes';
        value: number | JobType;
      } | null)
    | ({
        relationTo: 'jobRoles';
        value: number | JobRole;
      } | null)
    | ({
        relationTo: 'salaryRange';
        value: number | SalaryRange;
      } | null)
    | ({
        relationTo: 'search';
        value: number | Search;
      } | null)
    | ({
        relationTo: 'forms';
        value: number | Form;
      } | null)
    | ({
        relationTo: 'form-submissions';
        value: number | FormSubmission;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: number;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: number;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  displayName?: T;
  username?: T;
  imageUrl?: T;
  role?: T;
  emailVerified?: T;
  socialLinks?:
    | T
    | {
        platform?: T;
        value?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  _verified?: T;
  _verificationToken?: T;
  loginAttempts?: T;
  lockUntil?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages_select".
 */
export interface PagesSelect<T extends boolean = true> {
  title?: T;
  layout?:
    | T
    | {
        Details?: T | DetailsTypeSelect<T>;
        List?: T | ListTypeSelect<T>;
        FormBlock?: T | FormTypeSelect<T>;
        Hero?: T | HeroTypeSelect<T>;
        BlogPosts?: T | BlogPostsTypeSelect<T>;
        Companies?: T | CompaniesTypeSelect<T>;
        Content?: T | ContentTypeSelect<T>;
        ImageBlock?: T | ImageBlockTypeSelect<T>;
        Team?: T | TeamTypeSelect<T>;
        Values?: T | ValuesTypeSelect<T>;
        TermsOrPrivacy?: T | TermsOrPrivacyTypeSelect<T>;
        FeaturedJobs?: T | FeaturedJobsTypeSelect<T>;
        Contact?: T | ContactTypeSelect<T>;
        DisqusComments?: T | DisqusCommentsTypeSelect<T>;
      };
  meta?:
    | T
    | {
        title?: T;
        description?: T;
        image?: T;
      };
  isHome?: T;
  isDynamic?: T;
  slugMode?: T;
  slug?: T;
  pathMode?: T;
  path?: T;
  parent?: T;
  breadcrumbs?:
    | T
    | {
        doc?: T;
        url?: T;
        label?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "DetailsType_select".
 */
export interface DetailsTypeSelect<T extends boolean = true> {
  collectionSlug?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ListType_select".
 */
export interface ListTypeSelect<T extends boolean = true> {
  title?: T;
  collectionSlug?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FormType_select".
 */
export interface FormTypeSelect<T extends boolean = true> {
  title?: T;
  form?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "HeroType_select".
 */
export interface HeroTypeSelect<T extends boolean = true> {
  heading?: T;
  description?: T;
  heroSectionImages?:
    | T
    | {
        image?: T;
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "BlogPostsType_select".
 */
export interface BlogPostsTypeSelect<T extends boolean = true> {
  heading?: T;
  description?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CompaniesType_select".
 */
export interface CompaniesTypeSelect<T extends boolean = true> {
  heading?: T;
  companyLogos?:
    | T
    | {
        companyLogo?: T;
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ContentType_select".
 */
export interface ContentTypeSelect<T extends boolean = true> {
  heading?: T;
  description?: T;
  contentDetails?:
    | T
    | {
        title?: T;
        subtitle?: T;
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ImageBlockType_select".
 */
export interface ImageBlockTypeSelect<T extends boolean = true> {
  image?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TeamType_select".
 */
export interface TeamTypeSelect<T extends boolean = true> {
  heading?: T;
  description?: T;
  team?:
    | T
    | {
        image?: T;
        name?: T;
        designation?: T;
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ValuesType_select".
 */
export interface ValuesTypeSelect<T extends boolean = true> {
  heading?: T;
  description?: T;
  values?:
    | T
    | {
        title?: T;
        description?: T;
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TermsOrPrivacyType_select".
 */
export interface TermsOrPrivacyTypeSelect<T extends boolean = true> {
  content?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FeaturedJobsType_select".
 */
export interface FeaturedJobsTypeSelect<T extends boolean = true> {
  heading?: T;
  description?: T;
  buttonText?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ContactType_select".
 */
export interface ContactTypeSelect<T extends boolean = true> {
  address?: T;
  contactNumber?: T;
  mail?: T;
  contactForm?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "DisqusCommentsType_select".
 */
export interface DisqusCommentsTypeSelect<T extends boolean = true> {
  title?: T;
  shortName?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "blogs_select".
 */
export interface BlogsSelect<T extends boolean = true> {
  blogImage?: T;
  title?: T;
  description?: T;
  tags?: T;
  author?: T;
  content?: T;
  meta?:
    | T
    | {
        title?: T;
        description?: T;
        image?: T;
      };
  slug?: T;
  publishOn?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tags_select".
 */
export interface TagsSelect<T extends boolean = true> {
  tagImage?: T;
  title?: T;
  description?: T;
  color?: T;
  meta?:
    | T
    | {
        title?: T;
        description?: T;
        image?: T;
      };
  slug?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
  sizes?:
    | T
    | {
        thumbnail?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        blogImageSize2?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        blogImageSize3?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "jobPosts_select".
 */
export interface JobPostsSelect<T extends boolean = true> {
  company?:
    | T
    | {
        name?: T;
        email?: T;
        logo?: T;
        website?: T;
        location?: T;
      };
  dates?:
    | T
    | {
        openingDate?: T;
        closingDate?: T;
      };
  jobDetails?:
    | T
    | {
        title?: T;
        slug?: T;
        type?: T;
        roles?: T;
        description?: T;
        location?: T;
        salaryRange?:
          | T
          | {
              min?: T;
              max?: T;
            };
        remote?: T;
      };
  requirements?:
    | T
    | {
        experience?: T;
        qualifications?:
          | T
          | {
              qualification?: T;
              id?: T;
            };
        skills?:
          | T
          | {
              skill?: T;
              id?: T;
            };
      };
  application?:
    | T
    | {
        applyType?: T;
        externalFormUrl?: T;
        internalForm?: T;
      };
  featured?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "scheduleCall_select".
 */
export interface ScheduleCallSelect<T extends boolean = true> {
  company?: T;
  name?: T;
  email?: T;
  role?: T;
  scheduledDate?: T;
  status?: T;
  notes?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "jobTypes_select".
 */
export interface JobTypesSelect<T extends boolean = true> {
  title?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "jobRoles_select".
 */
export interface JobRolesSelect<T extends boolean = true> {
  title?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "salaryRange_select".
 */
export interface SalaryRangeSelect<T extends boolean = true> {
  salaryType?: T;
  salaryMin?: T;
  salaryMax?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "search_select".
 */
export interface SearchSelect<T extends boolean = true> {
  title?: T;
  priority?: T;
  doc?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "forms_select".
 */
export interface FormsSelect<T extends boolean = true> {
  title?: T;
  fields?:
    | T
    | {
        checkbox?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              defaultValue?: T;
              id?: T;
              blockName?: T;
            };
        country?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        email?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        message?:
          | T
          | {
              message?: T;
              id?: T;
              blockName?: T;
            };
        number?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        select?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              options?:
                | T
                | {
                    label?: T;
                    value?: T;
                    id?: T;
                  };
              required?: T;
              id?: T;
              blockName?: T;
            };
        text?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        textarea?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        upload?:
          | T
          | {
              name?: T;
              label?: T;
              size?: T;
              width?: T;
              multiple?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
      };
  submitButtonLabel?: T;
  confirmationType?: T;
  confirmationMessage?: T;
  redirect?:
    | T
    | {
        url?: T;
      };
  emails?:
    | T
    | {
        emailTo?: T;
        cc?: T;
        bcc?: T;
        replyTo?: T;
        emailFrom?: T;
        subject?: T;
        message?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "form-submissions_select".
 */
export interface FormSubmissionsSelect<T extends boolean = true> {
  form?: T;
  submissionData?:
    | T
    | {
        field?: T;
        value?: T;
        file?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "site-settings".
 */
export interface SiteSetting {
  id: number;
  general: {
    title: string;
    description: string;
    /**
     * We recommend a maximum size of 256 * 256 pixels
     */
    faviconUrl: number | Media;
    /**
     * We recommend a maximum size of 1200 * 630 pixels
     */
    ogImageUrl: number | Media;
    keywords?: string[] | null;
    /**
     * This field is used to format currency values & used as default currency for ecommerce-theme
     */
    currency:
      | 'usd'
      | 'eur'
      | 'inr'
      | 'gbp'
      | 'jpy'
      | 'cad'
      | 'aud'
      | 'chf'
      | 'cny'
      | 'hkd'
      | 'sgd'
      | 'mxn'
      | 'brl'
      | 'rub'
      | 'krw'
      | 'zar'
      | 'try'
      | 'sar'
      | 'aed'
      | 'pln';
  };
  navbar: {
    logo: BrandLogo;
    menuLinks?:
      | {
          /**
           * Check to create group of links
           */
          group?: boolean | null;
          menuLink?: {
            type?: ('reference' | 'custom') | null;
            newTab?: boolean | null;
            /**
             * Upload an svg or logo to be displayed with link
             */
            icon?: (number | null) | Media;
            label: string;
            page?: {
              relationTo: 'pages';
              value: number | Page;
            } | null;
            url?: string | null;
            id?: string | null;
          };
          menuLinkGroup?: {
            groupTitle: string;
            groupLinks?:
              | {
                  type?: ('reference' | 'custom') | null;
                  newTab?: boolean | null;
                  /**
                   * Upload an svg or logo to be displayed with link
                   */
                  icon?: (number | null) | Media;
                  label: string;
                  page?: {
                    relationTo: 'pages';
                    value: number | Page;
                  } | null;
                  url?: string | null;
                  id?: string | null;
                }[]
              | null;
          };
          id?: string | null;
        }[]
      | null;
  };
  footer: {
    logo: BrandLogo;
    footerLinks?:
      | {
          /**
           * Check to create group of links
           */
          group?: boolean | null;
          menuLink?: {
            type?: ('reference' | 'custom') | null;
            newTab?: boolean | null;
            /**
             * Upload an svg or logo to be displayed with link
             */
            icon?: (number | null) | Media;
            label: string;
            page?: {
              relationTo: 'pages';
              value: number | Page;
            } | null;
            url?: string | null;
            id?: string | null;
          };
          menuLinkGroup?: {
            groupTitle: string;
            groupLinks?:
              | {
                  type?: ('reference' | 'custom') | null;
                  newTab?: boolean | null;
                  /**
                   * Upload an svg or logo to be displayed with link
                   */
                  icon?: (number | null) | Media;
                  label: string;
                  page?: {
                    relationTo: 'pages';
                    value: number | Page;
                  } | null;
                  url?: string | null;
                  id?: string | null;
                }[]
              | null;
          };
          id?: string | null;
        }[]
      | null;
    socialLinks?:
      | {
          platform:
            | 'website'
            | 'facebook'
            | 'instagram'
            | 'twitter'
            | 'linkedin'
            | 'youtube'
            | 'tiktok'
            | 'pinterest'
            | 'snapchat'
            | 'reddit'
            | 'tumblr'
            | 'whatsapp'
            | 'telegram'
            | 'github'
            | 'medium'
            | 'quora'
            | 'discord';
          value: string;
          id?: string | null;
        }[]
      | null;
    copyright?: string | null;
  };
  redirectionLinks?: {
    /**
     * This redirects to a blog details page
     */
    blogLink?: {
      relationTo: 'pages';
      value: number | Page;
    } | null;
    /**
     * This redirect to a product details page
     */
    productLink?: {
      relationTo: 'pages';
      value: number | Page;
    } | null;
    /**
     * This redirects to a author details page
     */
    authorLink?: {
      relationTo: 'pages';
      value: number | Page;
    } | null;
    /**
     * This redirects to a tag details page
     */
    tagLink?: {
      relationTo: 'pages';
      value: number | Page;
    } | null;
  };
  monetization?: {
    /**
     * Add the publisher-id from Google AdSense Console
     */
    adSenseId?: string | null;
    /**
     * Add the measurement id from Google Analytics dashboard
     */
    measurementId?: string | null;
  };
  themeSettings: {
    lightMode: {
      background: string;
      foreground: string;
      primary: string;
      primaryForeground: string;
      card: string;
      cardForeground: string;
      popover: string;
      popoverForeground: string;
      secondary: string;
      secondaryForeground: string;
      muted: string;
      mutedForeground: string;
      accent: string;
      accentForeground: string;
      destructive: string;
      destructiveForeground: string;
      border: string;
      input: string;
      ring: string;
    };
    darkMode: {
      background: string;
      foreground: string;
      primary: string;
      primaryForeground: string;
      card: string;
      cardForeground: string;
      popover: string;
      popoverForeground: string;
      secondary: string;
      secondaryForeground: string;
      muted: string;
      mutedForeground: string;
      accent: string;
      accentForeground: string;
      destructive: string;
      destructiveForeground: string;
      border: string;
      input: string;
      ring: string;
    };
    fonts: {
      display: {
        type: 'customFont' | 'googleFont';
        customFont?: (number | null) | Media;
        remoteFont?: string | null;
        fontName?: string | null;
      };
      body: {
        type: 'customFont' | 'googleFont';
        customFont?: (number | null) | Media;
        remoteFont?: string | null;
        fontName?: string | null;
      };
    };
    radius: 'none' | 'small' | 'medium' | 'large' | 'full';
  };
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "BrandLogo".
 */
export interface BrandLogo {
  imageUrl: number | Media;
  /**
   * Adjust to the height of the logo
   */
  height?: number | null;
  /**
   * Adjust to the width of the logo
   */
  width?: number | null;
  /**
   * This text appears below the footer image
   */
  description?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "site-settings_select".
 */
export interface SiteSettingsSelect<T extends boolean = true> {
  general?:
    | T
    | {
        title?: T;
        description?: T;
        faviconUrl?: T;
        ogImageUrl?: T;
        keywords?: T;
        currency?: T;
      };
  navbar?:
    | T
    | {
        logo?: T | BrandLogoSelect<T>;
        menuLinks?:
          | T
          | {
              group?: T;
              menuLink?:
                | T
                | {
                    type?: T;
                    newTab?: T;
                    icon?: T;
                    label?: T;
                    page?: T;
                    url?: T;
                    id?: T;
                  };
              menuLinkGroup?:
                | T
                | {
                    groupTitle?: T;
                    groupLinks?:
                      | T
                      | {
                          type?: T;
                          newTab?: T;
                          icon?: T;
                          label?: T;
                          page?: T;
                          url?: T;
                          id?: T;
                        };
                  };
              id?: T;
            };
      };
  footer?:
    | T
    | {
        logo?: T | BrandLogoSelect<T>;
        footerLinks?:
          | T
          | {
              group?: T;
              menuLink?:
                | T
                | {
                    type?: T;
                    newTab?: T;
                    icon?: T;
                    label?: T;
                    page?: T;
                    url?: T;
                    id?: T;
                  };
              menuLinkGroup?:
                | T
                | {
                    groupTitle?: T;
                    groupLinks?:
                      | T
                      | {
                          type?: T;
                          newTab?: T;
                          icon?: T;
                          label?: T;
                          page?: T;
                          url?: T;
                          id?: T;
                        };
                  };
              id?: T;
            };
        socialLinks?:
          | T
          | {
              platform?: T;
              value?: T;
              id?: T;
            };
        copyright?: T;
      };
  redirectionLinks?:
    | T
    | {
        blogLink?: T;
        productLink?: T;
        authorLink?: T;
        tagLink?: T;
      };
  monetization?:
    | T
    | {
        adSenseId?: T;
        measurementId?: T;
      };
  themeSettings?:
    | T
    | {
        lightMode?:
          | T
          | {
              background?: T;
              foreground?: T;
              primary?: T;
              primaryForeground?: T;
              card?: T;
              cardForeground?: T;
              popover?: T;
              popoverForeground?: T;
              secondary?: T;
              secondaryForeground?: T;
              muted?: T;
              mutedForeground?: T;
              accent?: T;
              accentForeground?: T;
              destructive?: T;
              destructiveForeground?: T;
              border?: T;
              input?: T;
              ring?: T;
            };
        darkMode?:
          | T
          | {
              background?: T;
              foreground?: T;
              primary?: T;
              primaryForeground?: T;
              card?: T;
              cardForeground?: T;
              popover?: T;
              popoverForeground?: T;
              secondary?: T;
              secondaryForeground?: T;
              muted?: T;
              mutedForeground?: T;
              accent?: T;
              accentForeground?: T;
              destructive?: T;
              destructiveForeground?: T;
              border?: T;
              input?: T;
              ring?: T;
            };
        fonts?:
          | T
          | {
              display?:
                | T
                | {
                    type?: T;
                    customFont?: T;
                    remoteFont?: T;
                    fontName?: T;
                  };
              body?:
                | T
                | {
                    type?: T;
                    customFont?: T;
                    remoteFont?: T;
                    fontName?: T;
                  };
            };
        radius?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "BrandLogo_select".
 */
export interface BrandLogoSelect<T extends boolean = true> {
  imageUrl?: T;
  height?: T;
  width?: T;
  description?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}